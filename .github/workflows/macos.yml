name: MacOS

on:
  workflow_call:
    inputs:
      VCPKG_SHA:
        required: true
        type: string
      NUGET_REGISTRY:
        required: true
        type: string
      NUGET_USERNAME:
        required: true
        type: string
    secrets:
      NUGET_REGISTRY_PAT:
        required: true

env:
  VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,readwrite"
  VCPKG_NUGET_REPOSITORY: https://github.com/mathisloge/vcpkg-nuget.git
  UPDATE: 1
  preset: macos-ci
  mono: mono

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Install required system packages
        run: |
          brew install automake ninja lcov

      - name: checkout mapnik
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: checkout vcpkg
        uses: actions/checkout@v2
        with:
          repository: "microsoft/vcpkg"
          ref: ${{ inputs.VCPKG_SHA }}
          path: vcpkg

      - name: "Setup vcpkg"
        shell: bash
        run: ./vcpkg/bootstrap-vcpkg.sh

      - name: "Setup NuGet Credentials"
        shell: "bash"
        run: >
          ${{ env.mono }} `./vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "${{ inputs.NUGET_REGISTRY }}"
          -storepasswordincleartext
          -name "GitHub"
          -username "${{ inputs.NUGET_USERNAME }}"
          -password "${{ secrets.NUGET_REGISTRY_PAT }}"

      - name: "Setup NuGet apikey"
        shell: "bash"
        run: >
          ${{ env.mono }} `./vcpkg/vcpkg fetch nuget | tail -n 1`
          setapikey "${{ secrets.NUGET_REGISTRY_PAT }}" -Source "${{ inputs.NUGET_REGISTRY }}"

      - name: Configure CMake
        run: cmake -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake --preset=${{ env.preset }}

      - name: Build
        run: cmake --build --preset ${{ env.preset }}

      - name: Test
        run: ctest --preset ${{ env.preset }}

      - name: Test visuals
        continue-on-error: true
        working-directory: build/${{ env.preset }}/out
        run: ./mapnik-test-visual -j $(sysctl -n hw.logicalcpu) --output-dir ./visual-test-result
      
      - name: Pack visual test results
        working-directory: build/${{ env.preset }}/out
        run: tar cfvz visual-test-results.tar.gz ./visual-test-result
      
      - name: Run Benchmark 
        working-directory: build/${{ env.preset }}/out
        run: |
          ./mapnik-benchmark-test_rendering --name "gdal tiff rendering" --map benchmark/data/gdal-wgs.xml --extent -180.0,-120.0,180.0,120.0 --width 600 --height 600 --iterations 20 --threads 10
      
      - name: Coverage
        working-directory: build/${{ env.preset }}
        run: |
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/vcpkg_installed/*'  '/.cache/*' '*/test/*'  --output-file coverage.info
          lcov --list coverage.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: build/${{ env.preset }}/coverage.info

      - name: Package
        run: cmake --build --preset ${{ env.preset }} --target package

      - name: Upload mapnik build artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos-mapnik-artifact
          path: build/${{ env.preset }}/mapnik-*.tar.gz
          retention-days: 2

      - name: Upload visual test results
        uses: actions/upload-artifact@v2
        with:
          name: macos-mapnik-visual-tests
          path: build/${{ env.preset }}/out/visual-test-results.tar.gz
          retention-days: 2
